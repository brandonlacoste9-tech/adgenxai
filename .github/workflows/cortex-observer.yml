name: Cortex Observer

on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch: {}

permissions:
  contents: read
  issues: write

jobs:
  report:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch telemetry and health
        id: fetch
        run: |
          set -euo pipefail
          curl -sSL https://adgenxai.pro/.netlify/functions/webhook-telemetry > telemetry.json
          curl -sSL https://adgenxai.pro/.netlify/functions/health > health.json
          
          echo "telemetry<<EOF" >> "$GITHUB_OUTPUT"
          cat telemetry.json >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          
          echo "health<<EOF" >> "$GITHUB_OUTPUT"
          cat health.json >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Post to tracking issue
        uses: actions/github-script@v7
        env:
          TELEMETRY: ${{ steps.fetch.outputs.telemetry }}
          HEALTH: ${{ steps.fetch.outputs.health }}
        with:
          script: |
            const telemetry = JSON.parse(process.env.TELEMETRY || '{}');
            const health = JSON.parse(process.env.HEALTH || '{}');
            const now = new Date().toISOString();

            const body = `## üß† Cortex Status Report

**Timestamp:** ${now}

### Metrics (Last 24h)
- **Total events:** ${telemetry.stats?.totalEvents ?? 0}
- **Processing mode:** ${telemetry.stats?.processing?.mode ?? 'unknown'}
- **Status:** ${telemetry.stats?.processing?.enabled ? '‚úÖ Active' : '‚è∏Ô∏è Observation only'}

### Health
\`\`\`json
${JSON.stringify(health, null, 2)}
\`\`\`

### Telemetry
\`\`\`json
${JSON.stringify(telemetry, null, 2)}
\`\`\`

---
*Automated observation ‚Äî no actions taken*`;

            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'cortex-status',
              state: 'open',
              per_page: 1
            });

            if (!issues.length) {
              core.warning('No cortex-status issue found');
              return;
            }

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issues[0].number,
              body
            });

            core.info('‚úÖ Posted to issue #' + issues[0].number);
