name: Cortex Observer

on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch: {}

permissions:
  contents: read
  issues: write

jobs:
  report:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch endpoints
        id: fetch
        run: |
          curl -sSL https://adgenxai.pro/.netlify/functions/webhook-telemetry > t.json
          curl -sSL https://adgenxai.pro/.netlify/functions/health > h.json
          {
            echo "telemetry<<EOF"
            cat t.json
            echo "EOF"
            echo "health<<EOF"
            cat h.json
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Post status
        uses: actions/github-script@v7
        env:
          TELEMETRY: ${{ steps.fetch.outputs.telemetry }}
          HEALTH: ${{ steps.fetch.outputs.health }}
        with:
          script: |
            const telemetry = JSON.parse(process.env.TELEMETRY || '{}');
            const health = JSON.parse(process.env.HEALTH || '{}');
            const now = new Date().toISOString();

            const body = `## ðŸ§  Cortex Status Report

**Timestamp:** ${now}

### Metrics
- Total events: ${telemetry.stats?.totalEvents ?? 0}
- Mode: ${telemetry.stats?.processing?.mode ?? 'unknown'}
- Status: ${telemetry.stats?.processing?.enabled ? 'Active' : 'Observation only'}

### Health
\`\`\`json
${JSON.stringify(health, null, 2)}
\`\`\`

### Telemetry
\`\`\`json
${JSON.stringify(telemetry, null, 2)}
\`\`\`

---
*Automated observation*`;

            const {data: issues} = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'cortex-status',
              state: 'open',
              per_page: 1
            });

            if (issues.length > 0) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues[0].number,
                body
              });
              console.log('Posted to issue #' + issues[0].number);
            }
